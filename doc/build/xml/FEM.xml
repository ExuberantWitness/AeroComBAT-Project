<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.12 -->
<document source="E:\Dropbox\Classes\Research\Hephaestus\V_021\AeroComBAT-Project\AeroComBAT-Project\doc\source\FEM.rst">
    <section ids="module-AeroComBAT.FEM fem-interface-module" names="fem\ interface\ module">
        <title>FEM Interface Module</title>
        <index entries="['single',\ u'AeroComBAT.FEM\ (module)',\ u'module-AeroComBAT.FEM',\ '']"></index>
        <paragraph>This module contains a basic environment for conducting finite element analysis.</paragraph>
        <paragraph>The primary purpose of this library is to fascilitate the creation of a FEM
within the AeroComBAT package.</paragraph>
        <field_list>
            <field>
                <field_name>SUMARRY OF THE CLASSES</field_name>
                <field_body>
                </field_body>
            </field>
        </field_list>
        <bullet_list bullet="-">
            <list_item>
                <definition_list>
                    <definition_list_item>
                        <term><title_reference>Model</title_reference>: The Model class has two main purposes. The first is that it is meant</term>
                        <definition>
                            <paragraph>to serve as an organizational class. Once an aircraft part has been loaded
into the model by using the addAircraftPart() method, the aircraft part
can be loaded and constrained by the user. Once all parts have been loaded
into the model and all loads and constraints have been applied, the user
can choose to execute the plotRigidModel() method to visualize the model
and make sure it accurately represents their problem. If the model appears
as it should, the user can elect to run a static, buckling, normal mode,
static aeroelastic, or dynamic flutter analysis.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </list_item>
            <list_item>
                <definition_list>
                    <definition_list_item>
                        <term><title_reference>LoadSet</title_reference>: This class is used to fascilitate the created of many loads that</term>
                        <definition>
                            <paragraph>cal be individually applied to a finite element model. Typically this class
is not explicitly used. Instead the are created by the applyLoads method of
the Model class.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </list_item>
            <list_item>
                <definition_list>
                    <definition_list_item>
                        <term><title_reference>FlutterPoint</title_reference>: Primarily as a way to fascilitate the interpolation of</term>
                        <definition>
                            <paragraph>flutter results generated from the flutterAnalysis method of Model.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </list_item>
        </bullet_list>
        <note>
            <paragraph>Currently the only avaliable part in the AeroComBAT package are wing
parts, however this is likely to change as parts such as masses, fuselages
and other types of aircraft parts are added.</paragraph>
        </note>
        <section ids="model" names="model">
            <title>MODEL</title>
            <index entries="['single',\ u'Model\ (class\ in\ AeroComBAT.FEM)',\ u'AeroComBAT.FEM.Model',\ '']"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Model" ids="AeroComBAT.FEM.Model" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model"><desc_annotation>class </desc_annotation><desc_addname>AeroComBAT.FEM.</desc_addname><desc_name>Model</desc_name><comment xml:space="preserve"></comment></desc_signature>
                <desc_content>
                    <paragraph>Creates a Model which is used to organize and analyze FEM.</paragraph>
                    <paragraph>The primary used of Model objects are to organize FEM's and analyze them.
The Model object doesn't create any finite elements. Instead, it loads
aircraft parts which contain various types of finite element structural
models as well as aerodynamic models. The type of model will depend on the
type of aircraft part added. Once all of the models are created and added
to the model object, the model object will serve as the analysis primary
interface used to manipulate the generated model.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Attributes</field_name>
                            <field_body>
                            </field_body>
                        </field>
                    </field_list>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><title_reference>Kg (DOFxDOF np.array[float])</title_reference>: This is the global stiffness matrix.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>Kgr ((DOF-CON)x(DOF-CON) np.array[float])</title_reference>: This is the global reduced</term>
                                    <definition>
                                        <paragraph>stiffness matrix. In other words, the global stiffness matrix with the
rows and columns corresponding to the constraints (CON) removed.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <paragraph><title_reference>Fg (DOFx1 np.array[float])</title_reference>: The global force vector.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>Fgr ((DOF-CON)x1 np.array[float])</title_reference>: The global reduced force vector. In</term>
                                    <definition>
                                        <paragraph>other words, the global force vector with the rows corresponding to the
constraints (CON) removed.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <paragraph><title_reference>Mg (DOFxDOF np.array[float])</title_reference>: The global mass matrix.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>Mgr ((DOF-CON)x(DOF-CON) np.array[float])</title_reference>: The global reduced mass</term>
                                    <definition>
                                        <paragraph>matrix. In other words, the global mass matrix with the rows and
columns corresponding to the constraints (CON) removed.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>Qg (DOFx1 np.array[float])</title_reference>: The global force boundary condition vector.</term>
                                    <definition>
                                        <paragraph>This is where all of the nodal loads are stored before the system is
assembled.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>nids (Array[int])</title_reference>: This array contains all of the node IDs used within</term>
                                    <definition>
                                        <paragraph>the model.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>nodeDict (dict[NID,node])</title_reference>: This dictionary is a mapping of the node IDs</term>
                                    <definition>
                                        <paragraph>used within the model to the corresponding node objects.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>elems (Array[obj])</title_reference>: This array contains all of the element objects used</term>
                                    <definition>
                                        <paragraph>in the model.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>const (dict[NID,Array[DOF])</title_reference>: This dictionary is a mapping of the node</term>
                                    <definition>
                                        <paragraph>IDs constrained and the corresponding degrees of freedom that are
constrained.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>parts (dict[PID, part])</title_reference>: This dictionary is a mapping of part ID's</term>
                                    <definition>
                                        <paragraph>(PID) and the aircraft part objects that are added to the model.
Currently the only suported parts are wings.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>loads (dict[LID,int])</title_reference>: This dictionary is a mapping of the load ID</term>
                                    <definition>
                                        <paragraph>(LID) and the load set objects.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>aeroBox (dict[PANID,panel])</title_reference>: This dictionary is a mapping of the</term>
                                    <definition>
                                        <paragraph>aerodynamic panel ID's (PANID) and the aerodynamic panel objects used
in the flutter analysis.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>SuperBeams (array[obj])</title_reference>: This array contains all of the superbeam's</term>
                                    <definition>
                                        <paragraph>added to the model through addElements. In otherwords, this superbeam
object is without an associated part.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>u (dict[str,1xDOF np.array[float]])</title_reference>: This dictionary maps analysis</term>
                                    <definition>
                                        <paragraph>names to displacement results for a static analysis.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>freqs (1x(DOF-CON) np.array[float])</title_reference>: This is a 1D array which holds the</term>
                                    <definition>
                                        <paragraph>frequencies of a normal modes analysis.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                    </bullet_list>
                    <field_list>
                        <field>
                            <field_name>Methods</field_name>
                            <field_body>
                            </field_body>
                        </field>
                    </field_list>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><title_reference>addElements</title_reference>: A method to add individual elements to the model.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>addAircraftParts</title_reference>: A method to add an Aircraft part to the model. This</term>
                                    <definition>
                                        <paragraph>is a much more effective method than addElements as when a part is
added, the model can utilize all of the organizational and post
processing methods built into the part.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>resetPointLoads</title_reference>: A convenient way to reset all of the nodal loads in</term>
                                    <definition>
                                        <paragraph>the model to zero.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>resetResults</title_reference>: A convenient way to clear the results in all of the</term>
                                    <definition>
                                        <paragraph>elements from a previous analysis. This method is subject to change as
the way in which results are stored is likely to change.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>applyLoads</title_reference>: A method to apply nodal loads as well as distributed loads</term>
                                    <definition>
                                        <paragraph>to a range of elements, all of the elements in a part, or all of the
elements in the model.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <paragraph><title_reference>applyConstraints</title_reference>: A method to apply nodal constraints to the model.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><title_reference>staticAnalysis</title_reference>: A method which conducts a linear static analysis.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>normalModesAnalysis</title_reference>: A method which conducts a normal modes analysis on</term>
                                    <definition>
                                        <paragraph>the model.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>flutterAnalysis</title_reference>: A method which conducts a linearized flutter pk-method</term>
                                    <definition>
                                        <paragraph>analysis on the model.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <paragraph><title_reference>plotRigidModel</title_reference>: A method to plot and visualize the model.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>plotDeformedModel</title_reference>: A method to plot and visualize the results from an</term>
                                    <definition>
                                        <paragraph>analysis on the model.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                    </bullet_list>
                    <index entries="['single',\ u'addAircraftParts()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.addAircraftParts',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.addAircraftParts" ids="AeroComBAT.FEM.Model.addAircraftParts" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.addAircraftParts"><desc_name>addAircraftParts</desc_name><desc_parameterlist><desc_parameter>parts</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>A method to add an array of aircraft parts to the model.</paragraph>
                            <paragraph>This method is a more robust version of addElements. Provided an array
of part objects, this method will add the parts to the model. This
includes adding all of the elements and nodes to the model, as well as
a few other pieces of information. In addition, if a wing has
aerodynamic panels associated with it, these will also be added to the
model.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><title_reference>parts (Array[obj])</title_reference>: An array of part objects.</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'addElements()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.addElements',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.addElements" ids="AeroComBAT.FEM.Model.addElements" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.addElements"><desc_name>addElements</desc_name><desc_parameterlist><desc_parameter>elemarray</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>A method to add elements to the model.</paragraph>
                            <paragraph>Provided an array of elements, this method can add those elements to
the model for analysis. This is a rather rudementary method as the post
processing methods utilized by the parts are not at the users disposal
for the elements added to the model in this way.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>elemarray (Array[obj])</title_reference>: Adds all of the elements in the array to</term>
                                            <definition>
                                                <paragraph>the model.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <note>
                                <paragraph>Currently supported elements include: SuperBeam, Tbeam.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'applyConstraints()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.applyConstraints',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.applyConstraints" ids="AeroComBAT.FEM.Model.applyConstraints" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.applyConstraints"><desc_name>applyConstraints</desc_name><desc_parameterlist><desc_parameter>NID</desc_parameter><desc_parameter>const</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>A method for applying nodal constraints to the model.</paragraph>
                            <paragraph>This method is the primary method for applying nodal constraints to the
model.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><title_reference>NID (int)</title_reference>: The node ID of the node to be constrained.</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>const (str, np.array[int])</title_reference>: const can either take the form of a</term>
                                            <definition>
                                                <paragraph>string in order to take advantage of the two most common
constraints being 'pin' or 'fix'. If a different constraint needs
to be applied, const could also be a numpy array listing the DOF
(integers 1-6) to be constrained.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <note>
                                <paragraph>When constraining nodes, only 0 displacement and rotation</paragraph>
                            </note>
                            <paragraph>constraints are currently supported.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'applyLoads()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.applyLoads',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.applyLoads" ids="AeroComBAT.FEM.Model.applyLoads" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.applyLoads"><desc_name>applyLoads</desc_name><desc_parameterlist><desc_parameter>LID</desc_parameter><desc_parameter>**kwargs</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>A method to apply nodal and distributed loads to the model.</paragraph>
                            <paragraph>This method allows the user to apply nodal loads to nodes and
distributed loads to elements within the model.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>f (func)</title_reference>: A function which, provided the provided a length 3 numpy</term>
                                            <definition>
                                                <paragraph>array representing a point in space, calculates the distributed
load value at that point. See an example below:</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>F (dict[NID,1x6 np.array[float]])</title_reference>: A dictionary mapping a node ID</term>
                                            <definition>
                                                <paragraph>to the loads to be applied at that node ID.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>allElems (bool)</title_reference>: A boolean value used to easily load all of the</term>
                                            <definition>
                                                <paragraph>elements which have been added to the model.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>PIDs (Array[int])</title_reference>: An array containing part ID's, signifying that</term>
                                            <definition>
                                                <paragraph>all elements used by that part should be loaded.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>eids (Array[int])</title_reference>: An array containing all of the element ID's</term>
                                            <definition>
                                                <paragraph>corresponding to all of the elements which should be loaded.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <paragraph>Distributed load function example:</paragraph>
                            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">def f(x):
   vx = (1/10)*10*x[2]**2-7*x[2]-2.1
   vy = 10*x[2]**2-7*x[2]
   pz = 0
   mx = 0
   my = 0
   tz = (10*x[2]**2-7*x[2])/10+3*x[0]**2
   return np.array([vx,vy,pz,mx,my,tz])</literal_block>
                            <paragraph>Nodal load dictionary example:</paragraph>
                            <literal_block highlight_args="{}" language="python" linenos="False" xml:space="preserve">F[NID] = np.array([Qx,Qy,P,Mx,My,T])</literal_block>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'flutterAnalysis()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.flutterAnalysis',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.flutterAnalysis" ids="AeroComBAT.FEM.Model.flutterAnalysis" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.flutterAnalysis"><desc_name>flutterAnalysis</desc_name><desc_parameterlist><desc_parameter>U_vec</desc_parameter><desc_parameter>kr_vec</desc_parameter><desc_parameter>M_vec</desc_parameter><desc_parameter>b</desc_parameter><desc_parameter>rho_0</desc_parameter><desc_parameter>nModes</desc_parameter><desc_parameter>**kwargs</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Conducts a flutter analysis.</paragraph>
                            <paragraph>This method calculates the flutter modes and damping provided
velocities, reduced frequencies, Mach numbers, and the reference
semi-chord.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>U_vec (1xN np.array[float])</title_reference>: A vector of trial velocities where the</term>
                                            <definition>
                                                <paragraph>damping and frequency of all of the respective mode shapes will be
calculated.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>kr_vec (1xM np.array[float])</title_reference>: A vector of reduced frequencies for</term>
                                            <definition>
                                                <paragraph>which the AIC's will be calculated. The minimum possible value can
be 0.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>M_vec (1xM np.array[float])</title_reference>: A vector of mach numbers at which the</term>
                                            <definition>
                                                <paragraph>AIC's will be calculated. Currently interpolating results by Mach
number aren't possible. As such, select mach numbers to be close to
the suspected instability.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <paragraph><title_reference>b (float)</title_reference>: The reference semi-chord.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><title_reference>rho_0 (float)</title_reference>: The reference density at sea level.</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>nmodes (int)</title_reference>: The number of modes to be considered for the flutter</term>
                                            <definition>
                                                <paragraph>analysis. For a composite cantilevered wing, 6 modes should usually
be sufficient.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>g (float)</title_reference>: A proportional structural damping term. Acceptable</term>
                                            <definition>
                                                <paragraph>ranges of g can be approximated between 0. and 0.05.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>symxz (bool)</title_reference>: A boolean value indicating whether the aerodynamics</term>
                                            <definition>
                                                <paragraph>should be mirrored over the xz-plane.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>rho_rat (1xN np.array[float])</title_reference>: An array of density ratios to allow</term>
                                            <definition>
                                                <paragraph>for flutter calculations at different altitudes.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>analysis_name (str)</title_reference>: The string name to be associated with this</term>
                                            <definition>
                                                <paragraph>analysis. By default, this is chosen to be 'analysis_untitled'.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <note>
                                <paragraph>Currently static aeroelastic instability (divergence) cannot</paragraph>
                            </note>
                            <paragraph>be captured by AeroComBAT.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'normalModesAnalysis()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.normalModesAnalysis',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.normalModesAnalysis" ids="AeroComBAT.FEM.Model.normalModesAnalysis" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.normalModesAnalysis"><desc_name>normalModesAnalysis</desc_name><desc_parameterlist><desc_parameter>**kwargs</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Conducts normal mode analysis.</paragraph>
                            <paragraph>This method conducts normal mode analysis on the model. This will
calculate all of the unknown frequency eigenvalues and eigenvectors for
the model, which can be plotted later.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>analysis_name (str)</title_reference>: The string name to be associated with this</term>
                                            <definition>
                                                <paragraph>analysis. By default, this is chosen to be 'analysis_untitled'.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <note>
                                <paragraph>There are internal loads that are calculated and stored
within the model elements, however be aware that these loads are
meaningless and are only retained as a means to display cross
section warping.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'plotDeformedModel()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.plotDeformedModel',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.plotDeformedModel" ids="AeroComBAT.FEM.Model.plotDeformedModel" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.plotDeformedModel"><desc_name>plotDeformedModel</desc_name><desc_parameterlist><desc_parameter>**kwargs</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Plots the deformed model.</paragraph>
                            <paragraph>This method plots the deformed model results for a given analysis in
the mayavi environement.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><title_reference>analysis_name (str)</title_reference>: The string identifier of the analysis.</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>figName (str)</title_reference>: The name of the figure. This is 'Rigid Model' by</term>
                                            <definition>
                                                <paragraph>default.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>clr (1x3 tuple(int))</title_reference>: The color tuple or RGB values to be used for</term>
                                            <definition>
                                                <paragraph>plotting the reference axis for all beam elements. By default this
color is black.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>numXSects (int)</title_reference>: The number of cross-sections desired to be plotted</term>
                                            <definition>
                                                <paragraph>for all wing sections. The default is 2.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>contour (str)</title_reference>: A string keyword to determine what analysis should</term>
                                            <definition>
                                                <paragraph>be plotted.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>contLim (1x2 Array[float])</title_reference>: An array containing the lower and upper</term>
                                            <definition>
                                                <paragraph>contour limits.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>warpScale (float)</title_reference>: The scaling factor used to magnify the cross</term>
                                            <definition>
                                                <paragraph>section warping displacement factor.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>displScale (float)</title_reference>: The scaling fator used to magnify the beam</term>
                                            <definition>
                                                <paragraph>element displacements and rotations.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>mode (int)</title_reference>: If the analysis name refers to a modal analysis, mode</term>
                                            <definition>
                                                <paragraph>refers to which mode from that analysis should be plotted.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>mayavi figure</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'plotRigidModel()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.plotRigidModel',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.plotRigidModel" ids="AeroComBAT.FEM.Model.plotRigidModel" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.plotRigidModel"><desc_name>plotRigidModel</desc_name><desc_parameterlist><desc_parameter>**kwargs</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Plots the rigid model.</paragraph>
                            <paragraph>This method plots the rigid model in the mayavi environement.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>figName (str)</title_reference>: The name of the figure. This is 'Rigid Model' by</term>
                                            <definition>
                                                <paragraph>default.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>clr (1x3 tuple(int))</title_reference>: The color tuple or RGB values to be used for</term>
                                            <definition>
                                                <paragraph>plotting the reference axis for all beam elements. By default this
color is black.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>numXSects (int)</title_reference>: The number of cross-sections desired to be plotted</term>
                                            <definition>
                                                <paragraph>for all wing sections. The default is 2.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>mayavi figure</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'resetPointLoads()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.resetPointLoads',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.resetPointLoads" ids="AeroComBAT.FEM.Model.resetPointLoads" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.resetPointLoads"><desc_name>resetPointLoads</desc_name><desc_parameterlist></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>A method to reset the point loads applied to the model.</paragraph>
                            <paragraph>This is a good method to reset the nodal loads applied to a model. This
method will be useful when attempting to apply a series different
analysis.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'resetResults()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.resetResults',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.resetResults" ids="AeroComBAT.FEM.Model.resetResults" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.resetResults"><desc_name>resetResults</desc_name><desc_parameterlist></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>A method to reset the results in a model.</paragraph>
                            <paragraph>This is a good method to reset the results in the model from a given
analysis. This method will be useful when attempting to apply a series
different analysis.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'staticAnalysis()\ (AeroComBAT.FEM.Model\ method)',\ u'AeroComBAT.FEM.Model.staticAnalysis',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Model" first="False" fullname="Model.staticAnalysis" ids="AeroComBAT.FEM.Model.staticAnalysis" module="AeroComBAT.FEM" names="AeroComBAT.FEM.Model.staticAnalysis"><desc_name>staticAnalysis</desc_name><desc_parameterlist><desc_parameter>LID</desc_parameter><desc_parameter>**kwargs</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Linear static analysis.</paragraph>
                            <paragraph>This method conducts a linear static analysis on the model. This will
calculate all of the unknown displacements in the model, and save not
only dispalcements, but also internal forces and moments in all of the
beam elements.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>LID (int)</title_reference>: The ID corresponding to the load set to be applied to</term>
                                            <definition>
                                                <paragraph>the model.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>analysis_name (str)</title_reference>: The string name to be associated with this</term>
                                            <definition>
                                                <paragraph>analysis. By default, this is chosen to be 'analysis_untitled'.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="load-set" names="load\ set">
            <title>LOAD SET</title>
            <index entries="['single',\ u'LoadSet\ (class\ in\ AeroComBAT.FEM)',\ u'AeroComBAT.FEM.LoadSet',\ '']"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="LoadSet" ids="AeroComBAT.FEM.LoadSet" module="AeroComBAT.FEM" names="AeroComBAT.FEM.LoadSet"><desc_annotation>class </desc_annotation><desc_addname>AeroComBAT.FEM.</desc_addname><desc_name>LoadSet</desc_name><desc_parameterlist><desc_parameter>LID</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                <desc_content>
                    <paragraph>Creates a Model which is used to organize and analyze FEM.</paragraph>
                    <paragraph>The primary use of LoadSet is to fascilitate the application of many
different complex loads to a finite element model.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Attributes</field_name>
                            <field_body>
                            </field_body>
                        </field>
                    </field_list>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><title_reference>LID (int)</title_reference>: The integer identifier for the load set object.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>pointLoads (dict[pointLoads[NID,F])</title_reference>: A dictionary mapping applied point</term>
                                    <definition>
                                        <paragraph>loads to the node ID's of the node where the load is applied.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>distributedLoads (dict[EID,f])</title_reference>: A dictionary mapping the distributed</term>
                                    <definition>
                                        <paragraph>load vector to the element ID of the element where the load is applied.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                    </bullet_list>
                    <field_list>
                        <field>
                            <field_name>Methods</field_name>
                            <field_body>
                            </field_body>
                        </field>
                    </field_list>
                    <bullet_list bullet="-">
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>__init__</title_reference>: The constructor of the class. This method initializes the</term>
                                    <definition>
                                        <paragraph>dictionaries used by the loads</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <paragraph><title_reference>addPointLoad</title_reference>: Adds point loads to the pointLoads dictionary attribute.</paragraph>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>addDictibutedLoad</title_reference>: Adds distributed loads to the distributedLoads</term>
                                    <definition>
                                        <paragraph>dictionary attribute.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                    </bullet_list>
                    <index entries="['single',\ u'addDistributedLoad()\ (AeroComBAT.FEM.LoadSet\ method)',\ u'AeroComBAT.FEM.LoadSet.addDistributedLoad',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="LoadSet" first="False" fullname="LoadSet.addDistributedLoad" ids="AeroComBAT.FEM.LoadSet.addDistributedLoad" module="AeroComBAT.FEM" names="AeroComBAT.FEM.LoadSet.addDistributedLoad"><desc_name>addDistributedLoad</desc_name><desc_parameterlist><desc_parameter>f</desc_parameter><desc_parameter>eid</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Initialized the load set ibject.</paragraph>
                            <paragraph>This method is a simple constructor for the load set object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><title_reference>LID (int)</title_reference>: The integer ID linked with the load set object.</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'addPointLoad()\ (AeroComBAT.FEM.LoadSet\ method)',\ u'AeroComBAT.FEM.LoadSet.addPointLoad',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="LoadSet" first="False" fullname="LoadSet.addPointLoad" ids="AeroComBAT.FEM.LoadSet.addPointLoad" module="AeroComBAT.FEM" names="AeroComBAT.FEM.LoadSet.addPointLoad"><desc_name>addPointLoad</desc_name><desc_parameterlist><desc_parameter>F</desc_parameter><desc_parameter>NID</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Initialized the load set ibject.</paragraph>
                            <paragraph>This method is a simple constructor for the load set object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><title_reference>LID (int)</title_reference>: The integer ID linked with the load set object.</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
        <section ids="flutter-point" names="flutter\ point">
            <title>FLUTTER POINT</title>
            <index entries="['single',\ u'FlutterPoint\ (class\ in\ AeroComBAT.FEM)',\ u'AeroComBAT.FEM.FlutterPoint',\ '']"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="FlutterPoint" ids="AeroComBAT.FEM.FlutterPoint" module="AeroComBAT.FEM" names="AeroComBAT.FEM.FlutterPoint"><desc_annotation>class </desc_annotation><desc_addname>AeroComBAT.FEM.</desc_addname><desc_name>FlutterPoint</desc_name><desc_parameterlist><desc_parameter>FPID</desc_parameter><desc_parameter>U_vec</desc_parameter><desc_parameter>nModes</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                <desc_content>
                    <paragraph>Creates a flutter point object.</paragraph>
                    <paragraph>The primary purpose for the flutter point class is to allow for easier
post processing of the data from the flutter modes.</paragraph>
                    <field_list>
                        <field>
                            <field_name>Attributes</field_name>
                            <field_body>
                            </field_body>
                        </field>
                    </field_list>
                    <bullet_list bullet="-">
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>FPID (int)</title_reference>: The integer identifier associated with the flutter point</term>
                                    <definition>
                                        <paragraph>object.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>U_vec (1xN np.array[float])</title_reference>: A vector of the velocities where the</term>
                                    <definition>
                                        <paragraph>flutter point frequency and damping have been solved.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>omegaAeroDict(dict[U,array[float])</title_reference>: This dictionary maps velocities to</term>
                                    <definition>
                                        <paragraph>the aerodynamic frequencies used to generate the AIC matricies.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>omegaRootDict(dict[U,array[float])</title_reference>: This dictionary maps velocities to</term>
                                    <definition>
                                        <paragraph>the root frequencies of the flutter mode solution for particular
reduced frequencies.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>gammaDict(dict[U,array[float])</title_reference>: This dictionary maps velocities to</term>
                                    <definition>
                                        <paragraph>the root damping of the flutter mode solution for particular
reduced frequencies.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>gammaDict(dict[U,array[float])</title_reference>: This dictionary maps velocities to</term>
                                    <definition>
                                        <paragraph>the root mode shape of the flutter mode solution for particular
reduced frequencies.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>omega (array[float])</title_reference>: An array of floats which are the</term>
                                    <definition>
                                        <paragraph>flutter mode frequencies corresponding to the velocities in U_vec.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>gamma (array[float])</title_reference>: An array of floats which are the</term>
                                    <definition>
                                        <paragraph>flutter mode damping values corresponding to the velocities in U_vec.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>shape (array[MxN np.array[float]])</title_reference>: An MxL numpy array which</term>
                                    <definition>
                                        <paragraph>contain the eigenvector solutions of the flutter mode. The values in
the eigenvectors are the coefficient weighting factors for the normal
mode shapes.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                    </bullet_list>
                    <field_list>
                        <field>
                            <field_name>Methods</field_name>
                            <field_body>
                            </field_body>
                        </field>
                    </field_list>
                    <bullet_list bullet="-">
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>__init__</title_reference>: The constructor of the class. This method initializes the</term>
                                    <definition>
                                        <paragraph>attributes of the model, as well as the flutter</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>saveSol</title_reference>: Saves solutions to the flutter equation for the particular</term>
                                    <definition>
                                        <paragraph>mode.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                        <list_item>
                            <definition_list>
                                <definition_list_item>
                                    <term><title_reference>interpOmegaRoot</title_reference>: Interpolates the flutter mode frequency, damping and</term>
                                    <definition>
                                        <paragraph>mode shapes for the different velocities.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </list_item>
                    </bullet_list>
                    <index entries="['single',\ u'__init__()\ (AeroComBAT.FEM.FlutterPoint\ method)',\ u'AeroComBAT.FEM.FlutterPoint.__init__',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="FlutterPoint" first="False" fullname="FlutterPoint.__init__" ids="AeroComBAT.FEM.FlutterPoint.__init__" module="AeroComBAT.FEM" names="AeroComBAT.FEM.FlutterPoint.__init__"><desc_name>__init__</desc_name><desc_parameterlist><desc_parameter>FPID</desc_parameter><desc_parameter>U_vec</desc_parameter><desc_parameter>nModes</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Creates a flutter point object.</paragraph>
                            <paragraph>This is the constructor for the flutter point object.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><title_reference>FPID (int)</title_reference>: The integer ID linked with the flutter point object.</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>U_vec (1xN np.array[float])</title_reference>: An array of velocities where the</term>
                                            <definition>
                                                <paragraph>flutter problem will be solved.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>nModes (int)</title_reference>: The number of modes that are used for the flutter</term>
                                            <definition>
                                                <paragraph>solution.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'interpOmegaRoot()\ (AeroComBAT.FEM.FlutterPoint\ method)',\ u'AeroComBAT.FEM.FlutterPoint.interpOmegaRoot',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="FlutterPoint" first="False" fullname="FlutterPoint.interpOmegaRoot" ids="AeroComBAT.FEM.FlutterPoint.interpOmegaRoot" module="AeroComBAT.FEM" names="AeroComBAT.FEM.FlutterPoint.interpOmegaRoot"><desc_name>interpOmegaRoot</desc_name><desc_parameterlist></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Interpolates correct dynamic frequencies and damping.</paragraph>
                            <paragraph>From the data saved using the saveSol method, this method interpolates
the correct dynamic frequencies and damping for the different flutter
velocities.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'saveSol()\ (AeroComBAT.FEM.FlutterPoint\ method)',\ u'AeroComBAT.FEM.FlutterPoint.saveSol',\ '']"></index>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="FlutterPoint" first="False" fullname="FlutterPoint.saveSol" ids="AeroComBAT.FEM.FlutterPoint.saveSol" module="AeroComBAT.FEM" names="AeroComBAT.FEM.FlutterPoint.saveSol"><desc_name>saveSol</desc_name><desc_parameterlist><desc_parameter>U</desc_parameter><desc_parameter>omega_aero</desc_parameter><desc_parameter>omega_root</desc_parameter><desc_parameter>gamma_root</desc_parameter><desc_parameter>shape</desc_parameter></desc_parameterlist><comment xml:space="preserve"></comment></desc_signature>
                        <desc_content>
                            <paragraph>Saves data from the flutter solutions.</paragraph>
                            <paragraph>This method saves the damping, frequencies and mode shapes for the
different flutter velocities and reduced frequencies.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Args</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph><title_reference>U (float)</title_reference>: The flutter velocity of the data.</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>omega_aero (float)</title_reference>: The aerodynamic frequency corresponding to the</term>
                                            <definition>
                                                <paragraph>reduced frequency.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>omega_root (float)</title_reference>: The root frequency corresponding to the</term>
                                            <definition>
                                                <paragraph>flutter solution of the particular aerodynamic frequency.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                                <list_item>
                                    <paragraph><title_reference>gamma_root (float)</title_reference>: The root damping of the flutter solution</paragraph>
                                </list_item>
                                <list_item>
                                    <definition_list>
                                        <definition_list_item>
                                            <term><title_reference>shape (1xM np.array[float])</title_reference>: The mode shape of the flutter</term>
                                            <definition>
                                                <paragraph>solution.</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </list_item>
                            </bullet_list>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                    </field_body>
                                </field>
                            </field_list>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>None</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </section>
    </section>
</document>
